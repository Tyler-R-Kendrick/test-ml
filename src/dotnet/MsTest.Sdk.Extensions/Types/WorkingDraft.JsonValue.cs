//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Buffers;
using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace TestML;

/// <summary>
/// Language-agnostic Test-Spec â€“ version 1.6
/// </summary>
public readonly partial struct WorkingDraft
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    [System.Text.Json.Serialization.JsonConverter(typeof(Corvus.Json.Internal.JsonValueConverter<JsonValue>))]
    public readonly partial struct JsonValue
        : IJsonValue<TestML.WorkingDraft.JsonValue>
    {
        private readonly Backing backing;
        private readonly JsonElement jsonElementBacking;
        private readonly string stringBacking;
        private readonly bool boolBacking;
        private readonly BinaryJsonNumber numberBacking;
        private readonly ImmutableList<JsonAny> arrayBacking;
        private readonly ImmutableList<JsonObjectProperty> objectBacking;

        /// <summary>
        /// Initializes a new instance of the <see cref="JsonValue"/> struct.
        /// </summary>
        public JsonValue()
        {
            this.jsonElementBacking = default;
            this.backing = Backing.JsonElement;
            this.stringBacking = string.Empty;
            this.boolBacking = default;
            this.numberBacking = default;
            this.arrayBacking = ImmutableList<JsonAny>.Empty;
            this.objectBacking = ImmutableList<JsonObjectProperty>.Empty;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JsonValue"/> struct.
        /// </summary>
        /// <param name="value">The value from which to construct the instance.</param>
        public JsonValue(in JsonElement value)
        {
            this.jsonElementBacking = value;
            this.backing = Backing.JsonElement;
            this.stringBacking = string.Empty;
            this.boolBacking = default;
            this.numberBacking = default;
            this.arrayBacking = ImmutableList<JsonAny>.Empty;
            this.objectBacking = ImmutableList<JsonObjectProperty>.Empty;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JsonValue"/> struct.
        /// </summary>
        /// <param name="value">The value from which to construct the instance.</param>
        public JsonValue(ImmutableList<JsonAny> value)
        {
            this.backing = Backing.Array;
            this.jsonElementBacking = default;
            this.stringBacking = string.Empty;
            this.boolBacking = default;
            this.numberBacking = default;
            this.arrayBacking = value;
            this.objectBacking = ImmutableList<JsonObjectProperty>.Empty;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JsonValue"/> struct.
        /// </summary>
        /// <param name="value">The value from which to construct the instance.</param>
        public JsonValue(bool value)
        {
            this.backing = Backing.Bool;
            this.jsonElementBacking = default;
            this.stringBacking = string.Empty;
            this.boolBacking = value;
            this.numberBacking = default;
            this.arrayBacking = ImmutableList<JsonAny>.Empty;
            this.objectBacking = ImmutableList<JsonObjectProperty>.Empty;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JsonValue"/> struct.
        /// </summary>
        /// <param name="value">The value from which to construct the instance.</param>
        public JsonValue(BinaryJsonNumber value)
        {
            this.backing = Backing.Number;
            this.jsonElementBacking = default;
            this.stringBacking = string.Empty;
            this.boolBacking = default;
            this.numberBacking = value;
            this.arrayBacking = ImmutableList<JsonAny>.Empty;
            this.objectBacking = ImmutableList<JsonObjectProperty>.Empty;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JsonValue"/> struct.
        /// </summary>
        /// <param name="value">The value from which to construct the instance.</param>
        public JsonValue(ImmutableList<JsonObjectProperty> value)
        {
            this.backing = Backing.Object;
            this.jsonElementBacking = default;
            this.stringBacking = string.Empty;
            this.boolBacking = default;
            this.numberBacking = default;
            this.arrayBacking = ImmutableList<JsonAny>.Empty;
            this.objectBacking = value;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JsonValue"/> struct.
        /// </summary>
        /// <param name="value">The value from which to construct the instance.</param>
        public JsonValue(string value)
        {
            this.backing = Backing.String;
            this.jsonElementBacking = default;
            this.stringBacking = value;
            this.boolBacking = default;
            this.numberBacking = default;
            this.arrayBacking = ImmutableList<JsonAny>.Empty;
            this.objectBacking = ImmutableList<JsonObjectProperty>.Empty;
        }

        /// <summary>
        /// Gets the schema location from which this type was generated.
        /// </summary>
        public static string SchemaLocation { get; } = "https://endjin.com/workspaces/test-ml/docs/spec/draft/working-draft.json#/definitions/jsonValue";

        /// <summary>
        /// Gets a Null instance.
        /// </summary>
        public static JsonValue Null { get; } = new(JsonValueHelpers.NullElement);

        /// <summary>
        /// Gets an Undefined instance.
        /// </summary>
        public static JsonValue Undefined { get; }

        /// <summary>
        /// Gets the default instance.
        /// </summary>
        public static JsonValue DefaultInstance { get; }

        /// <inheritdoc/>
        public JsonAny AsAny
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    return new(this.jsonElementBacking);
                }

                if ((this.backing & Backing.String) != 0)
                {
                    return new(this.stringBacking);
                }

                if ((this.backing & Backing.Bool) != 0)
                {
                    return new(this.boolBacking);
                }

                if ((this.backing & Backing.Number) != 0)
                {
                    return new(this.numberBacking);
                }

                if ((this.backing & Backing.Array) != 0)
                {
                    return new(this.arrayBacking);
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    return new(this.objectBacking);
                }

                if ((this.backing & Backing.Null) != 0)
                {
                    return JsonAny.Null;
                }

                return JsonAny.Undefined;
            }
        }

        /// <inheritdoc/>
        public JsonElement AsJsonElement
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    return this.jsonElementBacking;
                }

                if ((this.backing & Backing.String) != 0)
                {
                    return JsonValueHelpers.StringToJsonElement(this.stringBacking);
                }

                if ((this.backing & Backing.Bool) != 0)
                {
                    return JsonValueHelpers.BoolToJsonElement(this.boolBacking);
                }

                if ((this.backing & Backing.Number) != 0)
                {
                    return JsonValueHelpers.NumberToJsonElement(this.numberBacking);
                }

                if ((this.backing & Backing.Array) != 0)
                {
                    return JsonValueHelpers.ArrayToJsonElement(this.arrayBacking);
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    return JsonValueHelpers.ObjectToJsonElement(this.objectBacking);
                }

                if ((this.backing & Backing.Null) != 0)
                {
                    return JsonValueHelpers.NullElement;
                }

                return default;
            }
        }

        /// <inheritdoc/>
        public JsonString AsString
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    return new(this.jsonElementBacking);
                }

                if ((this.backing & Backing.String) != 0)
                {
                    return new(this.stringBacking);
                }

                throw new InvalidOperationException();
            }
        }

        /// <inheritdoc/>
        public JsonBoolean AsBoolean
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    return new(this.jsonElementBacking);
                }

                if ((this.backing & Backing.Bool) != 0)
                {
                    return new(this.boolBacking);
                }

                throw new InvalidOperationException();
            }
        }

        /// <inheritdoc/>
        public JsonNumber AsNumber
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    return new(this.jsonElementBacking);
                }

                if ((this.backing & Backing.Number) != 0)
                {
                    return new(this.numberBacking);
                }

                throw new InvalidOperationException();
            }
        }

        /// <inheritdoc/>
        public JsonObject AsObject
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    return new(this.jsonElementBacking);
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    return new(this.objectBacking);
                }

                throw new InvalidOperationException();
            }
        }

        /// <inheritdoc/>
        public JsonArray AsArray
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    return new(this.jsonElementBacking);
                }

                if ((this.backing & Backing.Array) != 0)
                {
                    return new(this.arrayBacking);
                }

                throw new InvalidOperationException();
            }
        }

        /// <summary>
        /// Gets the instance as a <see cref="Corvus.Json.JsonString" />.
        /// </summary>
        public Corvus.Json.JsonString AsJsonString
        {
            get
            {
                return this.As<Corvus.Json.JsonString>();
            }
        }

        /// <summary>
        /// Gets a value indicating whether the instance is a <see cref="Corvus.Json.JsonString" />.
        /// </summary>
        public bool IsJsonString
        {
            get
            {
                return this.As<Corvus.Json.JsonString>().IsValid();
            }
        }

        /// <summary>
        /// Gets the instance as a <see cref="Corvus.Json.JsonNumber" />.
        /// </summary>
        public Corvus.Json.JsonNumber AsJsonNumber
        {
            get
            {
                return this.As<Corvus.Json.JsonNumber>();
            }
        }

        /// <summary>
        /// Gets a value indicating whether the instance is a <see cref="Corvus.Json.JsonNumber" />.
        /// </summary>
        public bool IsJsonNumber
        {
            get
            {
                return this.As<Corvus.Json.JsonNumber>().IsValid();
            }
        }

        /// <summary>
        /// Gets the instance as a <see cref="Corvus.Json.JsonBoolean" />.
        /// </summary>
        public Corvus.Json.JsonBoolean AsJsonBoolean
        {
            get
            {
                return this.As<Corvus.Json.JsonBoolean>();
            }
        }

        /// <summary>
        /// Gets a value indicating whether the instance is a <see cref="Corvus.Json.JsonBoolean" />.
        /// </summary>
        public bool IsJsonBoolean
        {
            get
            {
                return this.As<Corvus.Json.JsonBoolean>().IsValid();
            }
        }

        /// <summary>
        /// Gets the instance as a <see cref="Corvus.Json.JsonObject" />.
        /// </summary>
        public Corvus.Json.JsonObject AsJsonObject
        {
            get
            {
                return this.As<Corvus.Json.JsonObject>();
            }
        }

        /// <summary>
        /// Gets a value indicating whether the instance is a <see cref="Corvus.Json.JsonObject" />.
        /// </summary>
        public bool IsJsonObject
        {
            get
            {
                return this.As<Corvus.Json.JsonObject>().IsValid();
            }
        }

        /// <summary>
        /// Gets the instance as a <see cref="TestML.WorkingDraft.JsonValue.OneOf4Array" />.
        /// </summary>
        public TestML.WorkingDraft.JsonValue.OneOf4Array AsOneOf4Array
        {
            get
            {
                return this.As<TestML.WorkingDraft.JsonValue.OneOf4Array>();
            }
        }

        /// <summary>
        /// Gets a value indicating whether the instance is a <see cref="TestML.WorkingDraft.JsonValue.OneOf4Array" />.
        /// </summary>
        public bool IsOneOf4Array
        {
            get
            {
                return this.As<TestML.WorkingDraft.JsonValue.OneOf4Array>().IsValid();
            }
        }

        /// <summary>
        /// Gets the instance as a <see cref="Corvus.Json.JsonNull" />.
        /// </summary>
        public Corvus.Json.JsonNull AsJsonNull
        {
            get
            {
                return this.As<Corvus.Json.JsonNull>();
            }
        }

        /// <summary>
        /// Gets a value indicating whether the instance is a <see cref="Corvus.Json.JsonNull" />.
        /// </summary>
        public bool IsJsonNull
        {
            get
            {
                return this.As<Corvus.Json.JsonNull>().IsValid();
            }
        }

        /// <inheritdoc/>
        public bool HasJsonElementBacking
        {
            get
            {
                return (this.backing & Backing.JsonElement) != 0;
            }
        }

        /// <inheritdoc/>
        public bool HasDotnetBacking
        {
            get
            {
                return (this.backing & Backing.Dotnet) != 0;
            }
        }

        /// <inheritdoc/>
        public JsonValueKind ValueKind
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    return this.jsonElementBacking.ValueKind;
                }

                if ((this.backing & Backing.String) != 0)
                {
                    return JsonValueKind.String;
                }

                if ((this.backing & Backing.Bool) != 0)
                {
                    return this.boolBacking ? JsonValueKind.True : JsonValueKind.False;
                }

                if ((this.backing & Backing.Number) != 0)
                {
                    return JsonValueKind.Number;
                }

                if ((this.backing & Backing.Array) != 0)
                {
                    return JsonValueKind.Array;
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    return JsonValueKind.Object;
                }

                if ((this.backing & Backing.Null) != 0)
                {
                    return JsonValueKind.Null;
                }

                return JsonValueKind.Undefined;
            }
        }

        /// <summary>
        /// Conversion from JsonAny.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator JsonValue(JsonAny value)
        {
            return value.As<JsonValue>();
        }

        /// <summary>
        /// Conversion to JsonAny.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator JsonAny(JsonValue value)
        {
            return value.AsAny;
        }

        /// <summary>
        /// Conversion to <see cref="TestML.WorkingDraft.JsonValue.OneOf4Array"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static explicit operator TestML.WorkingDraft.JsonValue.OneOf4Array(JsonValue value)
        {
            return value.As<TestML.WorkingDraft.JsonValue.OneOf4Array>();
        }

        /// <summary>
        /// Conversion from <see cref="TestML.WorkingDraft.JsonValue.OneOf4Array"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator JsonValue(TestML.WorkingDraft.JsonValue.OneOf4Array value)
        {
            return value.As<JsonValue>();
        }

        /// <summary>
        /// Operator ==.
        /// </summary>
        /// <param name="left">The lhs of the operator.</param>
        /// <param name="right">The rhs of the operator.</param>
        /// <returns>
        /// <c>True</c> if the values are equal.
        /// </returns>
        public static bool operator ==(in JsonValue left, in JsonValue right)
        {
            return left.Equals(right);
        }

        /// <summary>
        /// Operator !=.
        /// </summary>
        /// <param name="left">The lhs of the operator.</param>
        /// <param name="right">The rhs of the operator.</param>
        /// <returns>
        /// <c>True</c> if the values are not equal.
        /// </returns>
        public static bool operator !=(in JsonValue left, in JsonValue right)
        {
            return !left.Equals(right);
        }

        /// <summary>
        /// Gets an instance of the JSON value from a <see cref="JsonElement"/> value.
        /// </summary>
        /// <param name="value">The <see cref="JsonElement"/> value from which to instantiate the instance.</param>
        /// <returns>An instance of this type, initialized from the <see cref="JsonElement"/>.</returns>
        /// <remarks>The returned value will have a <see cref = "IJsonValue.ValueKind"/> of <see cref = "JsonValueKind.Undefined"/> if the
        /// value cannot be constructed from the given instance (e.g. because they have an incompatible .NET backing type).
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static JsonValue FromJson(in JsonElement value)
        {
            return new(value);
        }

        /// <summary>
        /// Gets an instance of the JSON value from a <see cref="JsonAny"/> value.
        /// </summary>
        /// <param name="value">The <see cref="JsonAny"/> value from which to instantiate the instance.</param>
        /// <returns>An instance of this type, initialized from the <see cref="JsonAny"/> value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static JsonValue FromAny(in JsonAny value)
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return value.ValueKind switch
            {
                JsonValueKind.String => new(value.AsString.GetString()!),
                JsonValueKind.True => new(true),
                JsonValueKind.False => new(false),
                JsonValueKind.Number => new(value.AsNumber.AsBinaryJsonNumber),
                JsonValueKind.Array => new(value.AsArray.AsImmutableList()),
                JsonValueKind.Object => new(value.AsObject.AsPropertyBacking()),
                JsonValueKind.Null => Null,
                _ => Undefined,
            };
        }

        /// <summary>
        /// Gets an instance of the JSON value from the provided value.
        /// </summary>
        /// <typeparam name="TValue">The type of the value.</typeparam>
        /// <param name="value">The value from which to instantiate the instance.</param>
        /// <returns>An instance of this type, initialized from the provided value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static JsonValue FromBoolean<TValue>(in TValue value)
            where TValue : struct, IJsonBoolean<TValue>
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return value.ValueKind switch
            {
                JsonValueKind.True => new(true),
                JsonValueKind.False => new(false),
                JsonValueKind.Null => Null,
                _ => Undefined,
            };
        }

        /// <summary>
        /// Gets an instance of the JSON value from the provided value.
        /// </summary>
        /// <typeparam name="TValue">The type of the value.</typeparam>
        /// <param name="value">The value from which to instantiate the instance.</param>
        /// <returns>An instance of this type, initialized from the provided value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static JsonValue FromString<TValue>(in TValue value)
            where TValue : struct, IJsonString<TValue>
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return value.ValueKind switch
            {
                JsonValueKind.String => new(value.GetString()!),
                JsonValueKind.Null => Null,
                _ => Undefined,
            };
        }

        /// <summary>
        /// Gets an instance of the JSON value from the provided value.
        /// </summary>
        /// <typeparam name="TValue">The type of the value.</typeparam>
        /// <param name="value">The value from which to instantiate the instance.</param>
        /// <returns>An instance of this type, initialized from the provided value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static JsonValue FromNumber<TValue>(in TValue value)
            where TValue : struct, IJsonNumber<TValue>
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return value.ValueKind switch
            {
                JsonValueKind.Number => new(value.AsBinaryJsonNumber),
                JsonValueKind.Null => Null,
                _ => Undefined,
            };
        }

        /// <summary>
        /// Gets an instance of the JSON value from the provided value.
        /// </summary>
        /// <typeparam name="TValue">The type of the value.</typeparam>
        /// <param name="value">The value from which to instantiate the instance.</param>
        /// <returns>An instance of this type, initialized from the provided value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static JsonValue FromObject<TValue>(in TValue value)
            where TValue : struct, IJsonObject<TValue>
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return value.ValueKind switch
            {
                JsonValueKind.Object => new(value.AsPropertyBacking()),
                JsonValueKind.Null => Null,
                _ => Undefined,
            };
        }

        /// <summary>
        /// Gets an instance of the JSON value from the provided value.
        /// </summary>
        /// <typeparam name="TValue">The type of the value.</typeparam>
        /// <param name="value">The value from which to instantiate the instance.</param>
        /// <returns>An instance of this type, initialized from the provided value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static JsonValue FromArray<TValue>(in TValue value)
            where TValue : struct, IJsonArray<TValue>
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return value.ValueKind switch
            {
                JsonValueKind.Array => new(value.AsImmutableList()),
                JsonValueKind.Null => Null,
                _ => Undefined,
            };
        }

        /// <summary>
        /// Parses the JsonValue.
        /// </summary>
        /// <param name="source">The source of the JSON string to parse.</param>
        /// <param name="options">The (optional) JsonDocumentOptions.</param>
        public static JsonValue Parse(string source, JsonDocumentOptions options = default)
        {
            using var jsonDocument = JsonDocument.Parse(source, options);
            return new(jsonDocument.RootElement.Clone());
        }

        /// <summary>
        /// Parses the JsonValue.
        /// </summary>
        /// <param name="source">The source of the JSON string to parse.</param>
        /// <param name="options">The (optional) JsonDocumentOptions.</param>
        public static JsonValue Parse(Stream source, JsonDocumentOptions options = default)
        {
            using var jsonDocument = JsonDocument.Parse(source, options);
            return new(jsonDocument.RootElement.Clone());
        }

        /// <summary>
        /// Parses the JsonValue.
        /// </summary>
        /// <param name="source">The source of the JSON string to parse.</param>
        /// <param name="options">The (optional) JsonDocumentOptions.</param>
        public static JsonValue Parse(ReadOnlyMemory<byte> source, JsonDocumentOptions options = default)
        {
            using var jsonDocument = JsonDocument.Parse(source, options);
            return new(jsonDocument.RootElement.Clone());
        }

        /// <summary>
        /// Parses the JsonValue.
        /// </summary>
        /// <param name="source">The source of the JSON string to parse.</param>
        /// <param name="options">The (optional) JsonDocumentOptions.</param>
        public static JsonValue Parse(ReadOnlyMemory<char> source, JsonDocumentOptions options = default)
        {
            using var jsonDocument = JsonDocument.Parse(source, options);
            return new(jsonDocument.RootElement.Clone());
        }

        /// <summary>
        /// Parses the JsonValue.
        /// </summary>
        /// <param name="source">The source of the JSON string to parse.</param>
        /// <param name="options">The (optional) JsonDocumentOptions.</param>
        public static JsonValue Parse(ReadOnlySequence<byte> source, JsonDocumentOptions options = default)
        {
            using var jsonDocument = JsonDocument.Parse(source, options);
            return new(jsonDocument.RootElement.Clone());
        }

        /// <summary>
        /// Parses the JsonValue.
        /// </summary>
        /// <param name="source">The source of the JSON string to parse.</param>
        public static JsonValue ParseValue(string source)
        {
#if NET8_0_OR_GREATER
            return IJsonValue<JsonValue>.ParseValue(source);
#else
            return JsonValueHelpers.ParseValue<JsonValue>(source.AsSpan());
#endif
        }

        /// <summary>
        /// Parses the JsonValue.
        /// </summary>
        /// <param name="source">The source of the JSON string to parse.</param>
        public static JsonValue ParseValue(ReadOnlySpan<char> source)
        {
#if NET8_0_OR_GREATER
            return IJsonValue<JsonValue>.ParseValue(source);
#else
            return JsonValueHelpers.ParseValue<JsonValue>(source);
#endif
        }

        /// <summary>
        /// Parses the JsonValue.
        /// </summary>
        /// <param name="source">The source of the JSON string to parse.</param>
        public static JsonValue ParseValue(ReadOnlySpan<byte> source)
        {
#if NET8_0_OR_GREATER
            return IJsonValue<JsonValue>.ParseValue(source);
#else
            return JsonValueHelpers.ParseValue<JsonValue>(source);
#endif
        }

        /// <summary>
        /// Parses the JsonValue.
        /// </summary>
        /// <param name="source">The source of the JSON string to parse.</param>
        public static JsonValue ParseValue(ref Utf8JsonReader source)
        {
#if NET8_0_OR_GREATER
            return IJsonValue<JsonValue>.ParseValue(ref source);
#else
            return JsonValueHelpers.ParseValue<JsonValue>(ref source);
#endif
        }

        /// <summary>
        /// Gets the value as an instance of the target value.
        /// </summary>
        /// <typeparam name="TTarget">The type of the target.</typeparam>
        /// <returns>An instance of the target type.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public TTarget As<TTarget>()
            where TTarget : struct, IJsonValue<TTarget>
        {
#if NET8_0_OR_GREATER
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return TTarget.FromJson(this.jsonElementBacking);
            }

            if ((this.backing & Backing.String) != 0)
            {
                return TTarget.FromString(this.AsString);
            }

            if ((this.backing & Backing.Bool) != 0)
            {
                return TTarget.FromBoolean(this.AsBoolean);
            }

            if ((this.backing & Backing.Number) != 0)
            {
                return TTarget.FromNumber(this.AsNumber);
            }

            if ((this.backing & Backing.Array) != 0)
            {
                return TTarget.FromArray(this.AsArray);
            }

            if ((this.backing & Backing.Object) != 0)
            {
                return TTarget.FromObject(this.AsObject);
            }

            if ((this.backing & Backing.Null) != 0)
            {
                return TTarget.Null;
            }

            return TTarget.Undefined;
#else
            return this.As<JsonValue, TTarget>();
#endif
        }

        /// <inheritdoc/>
        public override bool Equals(object? obj)
        {
            return
                (obj is IJsonValue jv && this.Equals(jv.As<JsonValue>())) ||
                (obj is null && this.IsNull());
        }

        /// <inheritdoc/>
        public bool Equals<T>(in T other)
            where T : struct, IJsonValue<T>
        {
            return this.Equals(other.As<JsonValue>());
        }

        /// <summary>
        /// Equality comparison.
        /// </summary>
        /// <param name="other">The other item with which to compare.</param>
        /// <returns><see langword="true"/> if the values were equal.</returns>
        public bool Equals(in JsonValue other)
        {
            JsonValueKind thisKind = this.ValueKind;
            JsonValueKind otherKind = other.ValueKind;
            if (thisKind != otherKind)
            {
                return false;
            }

            if (thisKind == JsonValueKind.Null || thisKind == JsonValueKind.Undefined)
            {
                return true;
            }

            if (thisKind == JsonValueKind.Array)
            {
                JsonArray thisArray = this.AsArray;
                JsonArray otherArray = other.AsArray;
                JsonArrayEnumerator lhs = thisArray.EnumerateArray();
                JsonArrayEnumerator rhs = otherArray.EnumerateArray();
                while (lhs.MoveNext())
                {
                    if (!rhs.MoveNext())
                    {
                        return false;
                    }

                    if (!lhs.Current.Equals(rhs.Current))
                    {
                        return false;
                    }
                }

                return !rhs.MoveNext();
            }

            if (thisKind == JsonValueKind.True || thisKind == JsonValueKind.False)
            {
                return true;
            }

            if (thisKind == JsonValueKind.Number)
            {
                if (this.backing == Backing.Number && other.backing == Backing.Number)
                {
                    return BinaryJsonNumber.Equals(this.numberBacking, other.numberBacking);
                }

                if (this.backing == Backing.Number && other.backing == Backing.JsonElement)
                {
                    return BinaryJsonNumber.Equals(this.numberBacking, other.jsonElementBacking);
                }

                if (this.backing == Backing.JsonElement && other.backing == Backing.Number)
                {
                    return BinaryJsonNumber.Equals(this.jsonElementBacking, other.numberBacking);
                }

                if (this.jsonElementBacking.TryGetDouble(out double lDouble))
                {
                    if (other.jsonElementBacking.TryGetDouble(out double rDouble))
                    {
                        return lDouble.Equals(rDouble);
                    }
                }

                if (this.jsonElementBacking.TryGetDecimal(out decimal lDecimal))
                {
                    if (other.jsonElementBacking.TryGetDecimal(out decimal rDecimal))
                    {
                        return lDecimal.Equals(rDecimal);
                    }
                }
            }

            if (thisKind == JsonValueKind.Object)
            {
                JsonObject thisObject = this.AsObject;
                JsonObject otherObject = other.AsObject;
                int count = 0;
                foreach (JsonObjectProperty property in thisObject.EnumerateObject())
                {
                    if (!otherObject.TryGetProperty(property.Name, out JsonAny value) || !property.Value.Equals(value))
                    {
                        return false;
                    }

                    count++;
                }

                int otherCount = 0;
                foreach (JsonObjectProperty otherProperty in otherObject.EnumerateObject())
                {
                    otherCount++;
                    if (otherCount > count)
                    {
                        return false;
                    }
                }

                return count == otherCount;
            }

            if (thisKind == JsonValueKind.String)
            {
                if (this.backing == Backing.JsonElement)
                {
                    if (other.backing == Backing.String)
                    {
                        return this.jsonElementBacking.ValueEquals(other.stringBacking);
                    }
                    else
                    {
                        other.jsonElementBacking.TryGetValue(CompareValues, this.jsonElementBacking, out bool areEqual);
                        return areEqual;
                    }

                }

                if (other.backing == Backing.JsonElement)
                {
                    return other.jsonElementBacking.ValueEquals(this.stringBacking);
                }

                return this.stringBacking.Equals(other.stringBacking);

                static bool CompareValues(ReadOnlySpan<byte> span, in JsonElement firstItem, out bool value)
                {
                    value = firstItem.ValueEquals(span);
                    return true;
                }
            }

            return false;
        }

        /// <inheritdoc/>
        public void WriteTo(Utf8JsonWriter writer)
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                }

                return;
            }

            if ((this.backing & Backing.Array) != 0)
            {
                JsonValueHelpers.WriteItems(this.arrayBacking, writer);

                return;
            }

            if ((this.backing & Backing.Bool) != 0)
            {
                writer.WriteBooleanValue(this.boolBacking);

                return;
            }

            if ((this.backing & Backing.Number) != 0)
            {
                this.numberBacking.WriteTo(writer);

                return;
            }

            if ((this.backing & Backing.Object) != 0)
            {
                JsonValueHelpers.WriteProperties(this.objectBacking, writer);

                return;
            }

            if ((this.backing & Backing.String) != 0)
            {
                writer.WriteStringValue(this.stringBacking);

                return;
            }

            if ((this.backing & Backing.Null) != 0)
            {
                writer.WriteNullValue();

                return;
            }
        }

        /// <inheritdoc/>
        public override int GetHashCode()
        {
            return this.ValueKind switch
            {
                JsonValueKind.Array => JsonValueHelpers.GetArrayHashCode(this),
                JsonValueKind.Object => JsonValueHelpers.GetObjectHashCode(this),
                JsonValueKind.Number => JsonValueHelpers.GetHashCodeForNumber(this),
                JsonValueKind.String => JsonValueHelpers.GetHashCodeForString(this),
                JsonValueKind.True => true.GetHashCode(),
                JsonValueKind.False => false.GetHashCode(),
                JsonValueKind.Null => JsonValueHelpers.NullHashCode,
                _ => JsonValueHelpers.UndefinedHashCode,
            };
        }

        /// <inheritdoc/>
        public override string ToString()
        {
            return this.Serialize();
        }

        /// <summary>
        /// Matches the value against the composed values, and returns the result of calling the provided match function for the first match found.
        /// </summary>
        /// <typeparam name="TIn">The immutable context to pass in to the match function.</typeparam>
        /// <typeparam name="TOut">The result of calling the match function.</typeparam>
        /// <param name="context">The context to pass to the match function.</param>
        /// <param name="matchJsonString">Match a <see cref="Corvus.Json.JsonString"/>.</param>
        /// <param name="matchJsonNumber">Match a <see cref="Corvus.Json.JsonNumber"/>.</param>
        /// <param name="matchJsonBoolean">Match a <see cref="Corvus.Json.JsonBoolean"/>.</param>
        /// <param name="matchJsonObject">Match a <see cref="Corvus.Json.JsonObject"/>.</param>
        /// <param name="matchOneOf4Array">Match a <see cref="TestML.WorkingDraft.JsonValue.OneOf4Array"/>.</param>
        /// <param name="matchJsonNull">Match a <see cref="Corvus.Json.JsonNull"/>.</param>
        /// <param name="defaultMatch">Match any other value.</param>
        /// <returns>An instance of the value returned by the match function.</returns>
        public TOut Match<TIn, TOut>(
            in TIn context,
            Matcher<Corvus.Json.JsonString, TIn, TOut> matchJsonString,
            Matcher<Corvus.Json.JsonNumber, TIn, TOut> matchJsonNumber,
            Matcher<Corvus.Json.JsonBoolean, TIn, TOut> matchJsonBoolean,
            Matcher<Corvus.Json.JsonObject, TIn, TOut> matchJsonObject,
            Matcher<TestML.WorkingDraft.JsonValue.OneOf4Array, TIn, TOut> matchOneOf4Array,
            Matcher<Corvus.Json.JsonNull, TIn, TOut> matchJsonNull,
            Matcher<TestML.WorkingDraft.JsonValue, TIn, TOut> defaultMatch)
        {
            Corvus.Json.JsonString matchJsonStringValue = this.As<Corvus.Json.JsonString>();
            if (matchJsonStringValue.IsValid())
            {
                return matchJsonString(matchJsonStringValue, context);
            }

            Corvus.Json.JsonNumber matchJsonNumberValue = this.As<Corvus.Json.JsonNumber>();
            if (matchJsonNumberValue.IsValid())
            {
                return matchJsonNumber(matchJsonNumberValue, context);
            }

            Corvus.Json.JsonBoolean matchJsonBooleanValue = this.As<Corvus.Json.JsonBoolean>();
            if (matchJsonBooleanValue.IsValid())
            {
                return matchJsonBoolean(matchJsonBooleanValue, context);
            }

            Corvus.Json.JsonObject matchJsonObjectValue = this.As<Corvus.Json.JsonObject>();
            if (matchJsonObjectValue.IsValid())
            {
                return matchJsonObject(matchJsonObjectValue, context);
            }

            TestML.WorkingDraft.JsonValue.OneOf4Array matchOneOf4ArrayValue = this.As<TestML.WorkingDraft.JsonValue.OneOf4Array>();
            if (matchOneOf4ArrayValue.IsValid())
            {
                return matchOneOf4Array(matchOneOf4ArrayValue, context);
            }

            Corvus.Json.JsonNull matchJsonNullValue = this.As<Corvus.Json.JsonNull>();
            if (matchJsonNullValue.IsValid())
            {
                return matchJsonNull(matchJsonNullValue, context);
            }

            return defaultMatch(this, context);
        }

        /// <summary>
        /// Matches the value against the composed values, and returns the result of calling the provided match function for the first match found.
        /// </summary>
        /// <typeparam name="TOut">The result of calling the match function.</typeparam>
        /// <param name="matchJsonString">Match a <see cref="Corvus.Json.JsonString"/>.</param>
        /// <param name="matchJsonNumber">Match a <see cref="Corvus.Json.JsonNumber"/>.</param>
        /// <param name="matchJsonBoolean">Match a <see cref="Corvus.Json.JsonBoolean"/>.</param>
        /// <param name="matchJsonObject">Match a <see cref="Corvus.Json.JsonObject"/>.</param>
        /// <param name="matchOneOf4Array">Match a <see cref="TestML.WorkingDraft.JsonValue.OneOf4Array"/>.</param>
        /// <param name="matchJsonNull">Match a <see cref="Corvus.Json.JsonNull"/>.</param>
        /// <param name="defaultMatch">Match any other value.</param>
        /// <returns>An instance of the value returned by the match function.</returns>
        public TOut Match<TOut>(
            Matcher<Corvus.Json.JsonString, TOut> matchJsonString,
            Matcher<Corvus.Json.JsonNumber, TOut> matchJsonNumber,
            Matcher<Corvus.Json.JsonBoolean, TOut> matchJsonBoolean,
            Matcher<Corvus.Json.JsonObject, TOut> matchJsonObject,
            Matcher<TestML.WorkingDraft.JsonValue.OneOf4Array, TOut> matchOneOf4Array,
            Matcher<Corvus.Json.JsonNull, TOut> matchJsonNull,
            Matcher<TestML.WorkingDraft.JsonValue, TOut> defaultMatch)
        {
            Corvus.Json.JsonString matchJsonStringValue = this.As<Corvus.Json.JsonString>();
            if (matchJsonStringValue.IsValid())
            {
                return matchJsonString(matchJsonStringValue);
            }

            Corvus.Json.JsonNumber matchJsonNumberValue = this.As<Corvus.Json.JsonNumber>();
            if (matchJsonNumberValue.IsValid())
            {
                return matchJsonNumber(matchJsonNumberValue);
            }

            Corvus.Json.JsonBoolean matchJsonBooleanValue = this.As<Corvus.Json.JsonBoolean>();
            if (matchJsonBooleanValue.IsValid())
            {
                return matchJsonBoolean(matchJsonBooleanValue);
            }

            Corvus.Json.JsonObject matchJsonObjectValue = this.As<Corvus.Json.JsonObject>();
            if (matchJsonObjectValue.IsValid())
            {
                return matchJsonObject(matchJsonObjectValue);
            }

            TestML.WorkingDraft.JsonValue.OneOf4Array matchOneOf4ArrayValue = this.As<TestML.WorkingDraft.JsonValue.OneOf4Array>();
            if (matchOneOf4ArrayValue.IsValid())
            {
                return matchOneOf4Array(matchOneOf4ArrayValue);
            }

            Corvus.Json.JsonNull matchJsonNullValue = this.As<Corvus.Json.JsonNull>();
            if (matchJsonNullValue.IsValid())
            {
                return matchJsonNull(matchJsonNullValue);
            }

            return defaultMatch(this);
        }

        /// <summary>
        /// Gets the value as a <see cref="Corvus.Json.JsonString" />.
        /// </summary>
        /// <param name="result">The result of the conversions.</param>
        /// <returns><see langword="true" /> if the conversion was valid.</returns>
        public bool TryGetAsJsonString(out Corvus.Json.JsonString result)
        {
            result = this.As<Corvus.Json.JsonString>();
            return result.IsValid();
        }

        /// <summary>
        /// Gets the value as a <see cref="Corvus.Json.JsonNumber" />.
        /// </summary>
        /// <param name="result">The result of the conversions.</param>
        /// <returns><see langword="true" /> if the conversion was valid.</returns>
        public bool TryGetAsJsonNumber(out Corvus.Json.JsonNumber result)
        {
            result = this.As<Corvus.Json.JsonNumber>();
            return result.IsValid();
        }

        /// <summary>
        /// Gets the value as a <see cref="Corvus.Json.JsonBoolean" />.
        /// </summary>
        /// <param name="result">The result of the conversions.</param>
        /// <returns><see langword="true" /> if the conversion was valid.</returns>
        public bool TryGetAsJsonBoolean(out Corvus.Json.JsonBoolean result)
        {
            result = this.As<Corvus.Json.JsonBoolean>();
            return result.IsValid();
        }

        /// <summary>
        /// Gets the value as a <see cref="Corvus.Json.JsonObject" />.
        /// </summary>
        /// <param name="result">The result of the conversions.</param>
        /// <returns><see langword="true" /> if the conversion was valid.</returns>
        public bool TryGetAsJsonObject(out Corvus.Json.JsonObject result)
        {
            result = this.As<Corvus.Json.JsonObject>();
            return result.IsValid();
        }

        /// <summary>
        /// Gets the value as a <see cref="TestML.WorkingDraft.JsonValue.OneOf4Array" />.
        /// </summary>
        /// <param name="result">The result of the conversions.</param>
        /// <returns><see langword="true" /> if the conversion was valid.</returns>
        public bool TryGetAsOneOf4Array(out TestML.WorkingDraft.JsonValue.OneOf4Array result)
        {
            result = this.As<TestML.WorkingDraft.JsonValue.OneOf4Array>();
            return result.IsValid();
        }

        /// <summary>
        /// Gets the value as a <see cref="Corvus.Json.JsonNull" />.
        /// </summary>
        /// <param name="result">The result of the conversions.</param>
        /// <returns><see langword="true" /> if the conversion was valid.</returns>
        public bool TryGetAsJsonNull(out Corvus.Json.JsonNull result)
        {
            result = this.As<Corvus.Json.JsonNull>();
            return result.IsValid();
        }
    }
}
